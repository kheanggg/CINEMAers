generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cinema {
  cinema_id     Int        @id @default(autoincrement())
  name          String
  description   String?
  openHour      String
  closeHour     String
  address1      String
  address2      String?
  city          String
  numberOfHalls Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  showtimes     Showtime[] // Relation to the Showtime model
}

model Showtime {
  showtime_id Int      @id @default(autoincrement())
  movie_id    Int
  cinema_id   Int
  hall_id     Int
  show_date   DateTime
  start_time  DateTime
  runtime     Int
  movie       Movie    @relation(fields: [movie_id], references: [movie_id])
  cinema      Cinema   @relation(fields: [cinema_id], references: [cinema_id])
}

model Movie {
  movie_id     Int        @id @default(autoincrement())
  title        String     @db.VarChar(255)
  description  String
  release_date DateTime?  @db.Date
  duration     Int
  genre        String?    @db.VarChar(100)
  rating       String?    @db.VarChar(25)
  posterurl    String?    @db.VarChar(255)
  trailerurl   String?    @db.VarChar(255)
  iscomingsoon Boolean    @default(false)
  showtimes    Showtime[]
  favorites      Favorite[]
}

model auth_providers {
  id          Int       @id @default(autoincrement())
  user_id     Int
  provider    String    @db.VarChar(50)
  provider_id String?   @db.VarChar(255)
  password    String?   @db.VarChar(255)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  username       String           @unique @db.VarChar(50)
  dob            DateTime?        @db.Date
  email          String           @unique @db.VarChar(255)
  phone_number   String?          @unique @db.VarChar(15)
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  updated_at     DateTime?        @default(now()) @db.Timestamp(6)
  auth_providers auth_providers[]
  favorites      Favorite[]       // Add this line for the relation to favorites
}

model admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  role      String   @default("admin") @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int      // Foreign key for the user
  movieId   Int      // Foreign key for the movie
  createdAt DateTime @default(now()) // Timestamp for when the favorite was added

  user      users   @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation to the users table
  movie     Movie   @relation(fields: [movieId], references: [movie_id], onDelete: Cascade) // Relation to the movie table

  @@unique([userId, movieId]) // Prevents duplicate favorite entries for the same user and movie
}